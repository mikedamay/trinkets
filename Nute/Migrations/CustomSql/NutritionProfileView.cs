using Microsoft.EntityFrameworkCore.Migrations;

/*
    Migrations Workflow (incl. Custom Migrations)
    ---------------------------------------------
 
    Constraints & Dependencies:
    a) Save <dbcontext>ModelSnapshot is required to support Database.Migrate()
    b) Git-ignore model based migrations so as not to confuse other devs.
    c) Database is disposable - completely reconstructable
    d) Model based migrations should not have dependencies on custom migrations.

    From scratch (from clean install of code-base):
    1. drop all objects from database
    2. remove any migrations generated from model that happen to be hanging about
    3. remove <dbConext>ModelSnapshot (starting point for migrations generated from mdeol)
    4. execute "dotnet ef migrations add start" - to generate migrations from model
    5. execute "dotnet ef migrations add custom" - to generate an empty migration
    6. Populate Up() and Down() body of class generated by custom (not the Designer)
       calls static methods from the CustomSql directory.
    7. execute "dotnet ef database update"
     
    Incremental (in an evolving code-base):
    1. Add a static class containing the Up() and Down() in CustomSql. 
    2. execute "dotnet ef migrations add <something>" - to generate migrations from model
    3. execute "dotnet ef migrations add custom-n" - to generate an empty migration
    4. Populate Up() and Down() body of class generated by custom (not the Designer)
       calls static methods from the CustomSql directory which have just been created.
    5. execute "dotnet ef database update"
    6. consolidate static custom methods in the CustomSql directory ready for a from scratch workflow. 
     
*/

namespace Nute.Migrations.CustomSql
{
    public static partial class NutritionProfileView
    {
        internal static void Up(MigrationBuilder mib)
        {
            mib.Sql(upScript);
        }

        internal static void Down(MigrationBuilder mib)
        {
            mib.Sql("drop view NutrientProfile_v");
        }
    }
}
