{-- what -}
module mike (stuff, more_stuff
  ,even_more) where
{-- this is the first comment - there is lot's going on behind the scenes --}
-- single line comment

import Graghics.Element exposing (show, abc)
import Graghics.Collage exposing (..)


fn = {mike | bob <- 1 + 23 }


type alias Bob = List a

mike : (Bool,Bool) -> Bool
mike = ("abc" || "defb" || "fun:funny")
{-- what -}
  || 22 && "5"

jon2 = let x = let y = 1 + 2 in y in x

xx ddl = f

f2 = l1 :: l2

xxx = bob + jon

funny =
    let
        ambassador {fargo, lennon} = fargo
    in
        ambassador 12

mike (abc,def) =
    let
        (a, b) = (abc,def)
    in
        a

bob t' = case t' of
 20 -> 20
    30 -> 30
    otherwise -> if t > 40 then 50 else case t' of 22 -> 33 44 -> 55
