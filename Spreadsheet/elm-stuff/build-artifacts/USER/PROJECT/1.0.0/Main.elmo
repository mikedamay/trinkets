Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Gridlines = Elm.Gridlines.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var constrainMovement = F2(function (t,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return _U.cmp(_v0._1,
              20) > 0 ? {ctor: "_Tuple2"
                        ,_0: -1
                        ,_1: 20} : _U.cmp(_v0._1,
              0) < 0 ? {ctor: "_Tuple2"
                       ,_0: 1
                       ,_1: 0} : {ctor: "_Tuple2"
                                 ,_0: _v0._0
                                 ,_1: _v0._1 + _v0._0};}
         _U.badCase($moduleName,
         "between lines 54 and 56");
      }();
   });
   var moveFormOneStep = F2(function (t,
   _v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return function () {
                 var x = t / 500;
                 var newVec = A2(constrainMovement,
                 t,
                 _v4._1);
                 return {ctor: "_Tuple2"
                        ,_0: A2($Graphics$Collage.move,
                        {ctor: "_Tuple2"
                        ,_0: x * $Basics.fst(newVec)
                        ,_1: 0},
                        _v4._0)
                        ,_1: newVec};
              }();}
         _U.badCase($moduleName,
         "between lines 45 and 49");
      }();
   });
   var moveForm = function (timeSignal) {
      return function () {
         var myForm = $Graphics$Collage.toForm($Graphics$Element.show("mike was here"));
         return A2($Signal.map,
         $Basics.fst,
         A3($Signal.foldp,
         moveFormOneStep,
         {ctor: "_Tuple2"
         ,_0: myForm
         ,_1: {ctor: "_Tuple2"
              ,_0: 1
              ,_1: 1}},
         timeSignal));
      }();
   };
   var doCollage = F2(function (timeSignal,
   windowSignal) {
      return function () {
         var staticCollageToElement = F3(function (fm,
         fm2,
         _v8) {
            return function () {
               switch (_v8.ctor)
               {case "_Tuple2":
                  return A3($Graphics$Collage.collage,
                    _v8._0,
                    _v8._1,
                    $List.concat(_L.fromArray([_L.fromArray([fm])
                                              ,fm2])));}
               _U.badCase($moduleName,
               "on line 31, column 18 to 71");
            }();
         });
         return A4($Signal.map3,
         staticCollageToElement,
         moveForm(timeSignal),
         $Gridlines.doGridlines,
         windowSignal);
      }();
   });
   var main = A2(doCollage,
   $Time.fps(1),
   $Window.dimensions);
   var handleClick = function (_v12) {
      return function () {
         switch (_v12.ctor)
         {case "_Tuple2":
            return A3($Graphics$Collage.collage,
              500,
              500,
              _L.fromArray([$Graphics$Collage.toForm($Graphics$Element.show({ctor: "_Tuple2"
                                                                            ,_0: _v12._0
                                                                            ,_1: _v12._1}))]));}
         _U.badCase($moduleName,
         "on line 21, column 14 to 93");
      }();
   };
   var mainy = A2($Signal.map,
   handleClick,
   A2($Signal.sampleOn,
   $Mouse.clicks,
   $Mouse.position));
   _elm.Main.values = {_op: _op
                      ,mainy: mainy
                      ,handleClick: handleClick
                      ,main: main
                      ,doCollage: doCollage
                      ,moveForm: moveForm
                      ,moveFormOneStep: moveFormOneStep
                      ,constrainMovement: constrainMovement};
   return _elm.Main.values;
};