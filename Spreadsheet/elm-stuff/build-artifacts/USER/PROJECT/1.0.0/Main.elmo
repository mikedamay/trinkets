Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $Gridlines = Elm.Gridlines.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var formAt = F2(function (_v0,
   str) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return $Graphics$Collage.move({ctor: "_Tuple2"
                                          ,_0: $Basics.toFloat(_v0._0)
                                          ,_1: $Basics.toFloat(_v0._1)})($Graphics$Collage.text($Text.fromString(str)));}
         _U.badCase($moduleName,
         "between lines 72 and 74");
      }();
   });
   var MousePos = function (a) {
      return {ctor: "MousePos"
             ,_0: a};
   };
   var Timer = function (a) {
      return {ctor: "Timer",_0: a};
   };
   var Click = function (a) {
      return {ctor: "Click",_0: a};
   };
   var Dims = function (a) {
      return {ctor: "Dims",_0: a};
   };
   var event = $Signal.mergeMany(_L.fromArray([A2($Signal.map,
                                              Dims,
                                              $Window.dimensions)
                                              ,A2($Signal.map,
                                              MousePos,
                                              $Mouse.position)
                                              ,A2($Signal.map,
                                              Click,
                                              A2($Signal.sampleOn,
                                              $Mouse.clicks,
                                              $Mouse.position))
                                              ,A2($Signal.map,
                                              Timer,
                                              $Time.every($Time.second))]));
   var initialModel = {_: {}
                      ,click: {ctor: "_Tuple2"
                              ,_0: 0
                              ,_1: 0}
                      ,dims: {ctor: "_Tuple2"
                             ,_0: 500
                             ,_1: 500}
                      ,gridCoords: $Grid.initialGridCoords
                      ,mousepos: {ctor: "_Tuple2"
                                 ,_0: 0
                                 ,_1: 0}
                      ,text: "mike was here"
                      ,time: 0};
   var doModel = function (ev) {
      return function () {
         var addGridCoords = F2(function (mod,
         d) {
            return function () {
               var updatedMod = _U.replace([["gridCoords"
                                            ,$Grid.getGridCoords(d)]],
               mod);
               var updatedMod2 = _U.replace([["dims"
                                             ,d]],
               updatedMod);
               return updatedMod2;
            }();
         });
         var doModel$ = F2(function (ev,
         mod) {
            return function () {
               switch (ev.ctor)
               {case "Click":
                  switch (ev._0.ctor)
                    {case "_Tuple2":
                       return _U.replace([["click"
                                          ,{ctor: "_Tuple2"
                                           ,_0: ev._0._0
                                           ,_1: ev._0._1}]],
                         mod);}
                    break;
                  case "Dims":
                  return A2(addGridCoords,
                    mod,
                    ev._0);
                  case "MousePos":
                  switch (ev._0.ctor)
                    {case "_Tuple2":
                       return _U.replace([["mousepos"
                                          ,{ctor: "_Tuple2"
                                           ,_0: ev._0._0
                                           ,_1: ev._0._1}]],
                         mod);}
                    break;
                  case "Timer":
                  return _U.replace([["time"
                                     ,ev._0]],
                    mod);}
               _U.badCase($moduleName,
               "between lines 49 and 54");
            }();
         });
         return A3($Signal.map2,
         addGridCoords,
         A3($Signal.foldp,
         doModel$,
         initialModel,
         ev),
         $Window.dimensions);
      }();
   };
   var Model = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,click: b
             ,dims: a
             ,gridCoords: f
             ,mousepos: e
             ,text: c
             ,time: d};
   });
   var main = function () {
      var display = function (model) {
         return function () {
            var gridCoords = model.gridCoords;
            var t = model.time;
            var $ = model.click,
            x = $._0,
            y = $._1;
            var $ = model.mousepos,
            mouse_x = $._0,
            mouse_y = $._1;
            var $ = model.dims,
            width = $._0,
            height = $._1;
            return A3($Graphics$Collage.collage,
            width,
            height,
            $List.concat(_L.fromArray([_L.fromArray([A2(formAt,
                                                    {ctor: "_Tuple2"
                                                    ,_0: x - (width / 2 | 0)
                                                    ,_1: 0 - y + (height / 2 | 0)},
                                                    $Basics.toString(gridCoords.horz))
                                                    ,A2(formAt,
                                                    {ctor: "_Tuple2"
                                                    ,_0: 0
                                                    ,_1: 0},
                                                    $Basics.toString(t))
                                                    ,A2(formAt,
                                                    {ctor: "_Tuple2"
                                                    ,_0: 100
                                                    ,_1: 100},
                                                    A2($Basics._op["++"],
                                                    $Basics.toString(width),
                                                    A2($Basics._op["++"],
                                                    ",",
                                                    $Basics.toString(height))))
                                                    ,A2(formAt,
                                                    {ctor: "_Tuple2"
                                                    ,_0: 200
                                                    ,_1: 200},
                                                    A2($Basics._op["++"],
                                                    $Basics.toString(mouse_x),
                                                    A2($Basics._op["++"],
                                                    ",",
                                                    $Basics.toString(mouse_y))))])
                                      ,A2($Gridlines.makeGridlines,
                                      gridCoords,
                                      {ctor: "_Tuple2"
                                      ,_0: width
                                      ,_1: height})])));
         }();
      };
      return A2($Signal.map,
      display,
      doModel(event));
   }();
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,Model: Model
                      ,initialModel: initialModel
                      ,doModel: doModel
                      ,Dims: Dims
                      ,Click: Click
                      ,Timer: Timer
                      ,MousePos: MousePos
                      ,event: event
                      ,formAt: formAt};
   return _elm.Main.values;
};